version: '3.9'

services:    
    data_preparing_service:
        container_name: data_preparing_service
        build:
            context: ./data_preparing_service
            dockerfile: Dockerfile
        # depends_on:
        #     db:
        #         condition: service_healthy
        #     broker:
        #         condition: service_healthy

    parser_service:
        container_name: parser_service
        build:
            context: ./parser_service
            dockerfile: Dockerfile
        ports:
            - 8020:8080
        # depends_on:
        #     data_preparing_service:
        #         condition: service_started
        #     broker:
        #         condition: service_healthy
    
    api:
        container_name: api_service
        build:
            context: ./api_service
            dockerfile: Dockerfile
        ports:
            - 8811:81
        # depends_on:
        #     data_preparing_service:
        #         condition: service_started
        #     broker:
        #         condition: service_healthy
        command: "poetry run uvicorn main:app --host 0.0.0.0 --port 81"

    frontend:
        container_name: frontend
        build: ./frontend_service
        volumes:
          - frontend_node_modules:/app/frontend/node_modules
        ports:
          - 3000:3000
        # stdin_open: true # разрешает ввод команд в контейнере
        command: npm start

    # telegram_service:
    #     container_name: telegram_service
    #     build:
    #         context: ./telegram_service
    #         dockerfile: Dockerfile
    #     ports:
    #         - 5050:5050
    #     depends_on:
    #         parser_service:
    #             condition: service_started
    #         broker:
    #             condition: service_healthy
    
    db:
        container_name: db
        image: postgres:latest
        environment:
            POSTGRES_DB: mydbname
            POSTGRES_USER: user
            POSTGRES_PASSWORD: qwerty
        ports:
          - "5432:5432"
        healthcheck:
            test: ["CMD", "pg_isready", "-q", "-d", "mydbname", "-U", "user"]
            interval: 5s
            timeout: 3s
            retries: 3
        # volumes:
        #     - postgres_auto_manager:/var/lib/postgresql/data

    broker:
        container_name: broker
        image: rabbitmq
        command: rabbitmq-server
        expose:
            - "5672"
            - "15672"
        # healthcheck:
        #     test: rabbitmq-diagnostics -q ping
        #     interval: 30s
        #     timeout: 30s
        #     retries: 3

volumes:
    frontend_node_modules:
#     postgres_auto_manager:
